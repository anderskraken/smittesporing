buildscript {
    ext.kotlin_version = '1.3.70'
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        google()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        def nav_version = "2.3.0-alpha03"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
    }
}

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id "com.betomorrow.appcenter" version "1.2.1"
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.70'
}

apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"

appcenter {
    apiToken = "859b43102e5beb789776dd17986e9bcadea32b58"
    ownerName = "agens"
    distributionGroups = ["Public"]
    releaseNotes = "Alpha"
    notifyTesters = false
    apps {
        release {
            appName = "Smittesporing"
        }
    }
}


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "no.agens.covid19"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode generateVersionCode()
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    def storepass = null

    Properties properties = new Properties()
    def propertiesFile = project.rootProject.file('local.properties')
    if (propertiesFile.exists()) {
        properties.load(propertiesFile.newDataInputStream())
        storepass = properties.getProperty('covid19_pwd')
    }

    if (storepass != null) {
        signingConfigs {
            release {
                storeFile file("../covid19.jks")
                storePassword storepass
                keyAlias "covid19"
                keyPassword storepass
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (storepass != null) {
                signingConfig signingConfigs.release
            }
        }
    }

// To inline the bytecode built with JVM target 1.8 into
// bytecode that is being built with JVM target 1.6. (e.g. navArgs)


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.navigation:navigation-fragment:2.2.1'
    implementation 'androidx.navigation:navigation-ui:2.2.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.1'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4"
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0"

    implementation "org.koin:koin-core:2.0.1"
    implementation "org.koin:koin-android:2.0.1"

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"


    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

static def generateVersionCode() {
    def result = "git rev-list HEAD --count".execute().text.trim() //unix
    if (result.empty) throw new RuntimeException("Could not generate versioncode on this platform? Cmd output: ${result.text}")
    return result.toInteger()
}